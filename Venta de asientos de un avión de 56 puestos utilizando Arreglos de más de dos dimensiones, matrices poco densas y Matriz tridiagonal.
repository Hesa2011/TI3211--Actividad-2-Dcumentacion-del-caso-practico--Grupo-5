# Caso practico venta de asientos de un avion de 56 puestos actividad-2 (Arreglos de más de dos dimensiones, matrices poco densas Matriz tridiagonal)
class Pasajero:
    def __init__(self, nombre, genero, asiento, boleto, clase, horario, tipo_pasajero):
        self.nombre = nombre
        self.genero = genero 
        self.asiento = asiento
        self.boleto = boleto
        self.fecha_de_vuelo = "2024-09-12"  
        self.destino = "Miami"  
        self.clase = clase
        self.horario = horario
        self.tipo_pasajero = tipo_pasajero
        self.precio = None  

    def __str__(self) -> str:
        return f"{self.nombre}, {self.genero}, Asiento: {self.asiento}, Boleto: {self.boleto}, Fecha: {self.fecha_de_vuelo}, Destino: {self.destino}, Precio: ${self.precio}"

precios_miami = {
    'Económica': {
        'Pico': {'Adulto': 400, 'Niño': 300},
        'No Pico': {'Adulto': 350, 'Niño': 250}
    },
    'Premium': {
        'Pico': {'Adulto': 600, 'Niño': 500},
        'No Pico': {'Adulto': 550, 'Niño': 450}
    }
}

def obtener_precio_vuelo(clase, horario, tipo_pasajero):
    try:
        return precios_miami[clase][horario][tipo_pasajero]
    except KeyError:
        print(f"Error: No hay precios definidos para {clase}, {horario}, {tipo_pasajero}")
        return None

filas = 8
columnas = 7
asientos = [[None for _ in range(columnas)] for _ in range(filas)]

precios_por_fila = {0: 10, 1: 8, 2: 8, 3: 6, 4: 6, 5: 5, 6: 5, 7: 5}
ajuste_por_columna = {0: 1, 6: 1, 3: -1}

def obtener_precio_asiento(fila, columna):
    precio_base = precios_por_fila[fila]  
    ajuste = ajuste_por_columna.get(columna, 0)  
    return precio_base + ajuste

def asignar_asiento(fila, columna, pasajero):
    if 0 <= fila < filas and 0 <= columna < columnas:
        if asientos[fila][columna] is None:
            precio_asiento = obtener_precio_asiento(fila, columna)
            precio_vuelo = obtener_precio_vuelo(pasajero.clase, pasajero.horario, pasajero.tipo_pasajero)
            if precio_vuelo is not None:
                pasajero.precio = precio_asiento + precio_vuelo  
                pasajero.asiento = f"{fila+1}{chr(65 + columna)}" 
                
                asientos[fila][columna] = pasajero
            else:
                print("No se pudo calcular el precio del vuelo.")
        else:
            print(f"Error: El asiento {fila+1}{chr(65 + columna)} ya está ocupado.")

    else:
        print(f"Error: Fila {fila+1} o columna {chr(65 + columna)} fuera del rango.")
        


def mostrar_asientos():
    for fila in range(filas):
        fila_asientos = []
        for columna in range(columnas):
            if asientos[fila][columna]:
                fila_asientos.append(f"Asiento {fila+1}{chr(65 + columna)}: {asientos[fila][columna].nombre}, Precio: ${asientos[fila][columna].precio}")
            else:
                fila_asientos.append(f"Asiento {fila+1}{chr(65 + columna)}: Vacío")
        print(" | ".join(fila_asientos))

def verificar_asientos_duplicados():
    asientos_ocupados = {}
    for fila in range(filas):
        for columna in range(columnas):
            pasajero = asientos[fila][columna]
            if pasajero:
                if pasajero.asiento in asientos_ocupados:
                    print(f"Error: El asiento {pasajero.asiento} está ocupado por más de un pasajero: {asientos_ocupados[pasajero.asiento].nombre} y {pasajero.nombre}")
                else:
                    asientos_ocupados[pasajero.asiento] = pasajero

# Lista de Pasajeros
pasajero1 = Pasajero("Maria J", "F", "7C", "C007", "Económica", "Pico", "Adulto")
pasajero2 = Pasajero("Julia M", "F", "5D", "D005", "Premium", "No Pico", "Niño")
pasajero3 = Pasajero("Armando N", "M", "1A", "A001", "Premium", "Pico", "Adulto")
pasajero4 = Pasajero("Isaac C", "M", "6A", "A006", "Económica", "No Pico", "Adulto")
pasajero5 = Pasajero("Juan G", "M", "3A", "A003", "Económica", "No Pico", "Niño")
pasajero6 = Pasajero("Jose P", "M", "4A", "A004","Premium", "Pico", "Adulto")
pasajero7 = Pasajero("Jonas L", "M", "7F", "F007","Premium","Pico", "Adulto")
pasajero8 = Pasajero("Gabriella V", "F", "6F", "F006","Premium","Pico", "Adulto")
pasajero9 = Pasajero("Pablo L", "M", "5F", "F005","Premium","Pico", "Adulto")
pasajero10 = Pasajero("Esther N", "F", "4F", "F004", "Premium","Pico"  ,"Adulto")


asignar_asiento(6, 2, pasajero1) 
asignar_asiento(4, 3, pasajero2)  
asignar_asiento(0, 0, pasajero3)  
asignar_asiento(5, 0, pasajero4) 
asignar_asiento(7, 6, pasajero5)
asignar_asiento(1, 5, pasajero6)
asignar_asiento(2, 4, pasajero7)
asignar_asiento(3, 3, pasajero8)
asignar_asiento(4, 2, pasajero9)
asignar_asiento(5, 1, pasajero10)
mostrar_asientos()

import numpy as np

vuelos = 2
asientos_3d = np.zeros((vuelos, filas, columnas))

def asignar_asiento_3d(vuelo, fila, columna, pasajeroID):
    if 0 <= vuelo < vuelos and 0 <= fila < filas and 0 <= columna < columnas:
        if asientos_3d[vuelo, fila, columna] == 0:
            asientos_3d[vuelo, fila, columna] = pasajeroID
        else:
            print("Error: Asiento ya ocupado")
    else:
        print("Error: Índice de vuelo, fila o columna fuera de rango")


asignar_asiento_3d(0, 2, 3, 1)
asignar_asiento_3d(1, 4, 2, 1)

print("Asientos (vuelos x filas x columnas):\n", asientos_3d)


from scipy.sparse import lil_matrix
sparse_matrix = lil_matrix((1000, 1000))

sparse_matrix[0, 0] = 1  
sparse_matrix[6, 2] = 1
sparse_matrix[4, 3] = 1
sparse_matrix[5, 0] = 1
sparse_matrix[7, 6] = 1
sparse_matrix[1, 5] = 1
sparse_matrix[2, 4] = 1
sparse_matrix[3, 3] = 1
sparse_matrix[4, 2] = 1
sparse_matrix[5, 1] = 1

print("Asientos ocupados en la matriz dispersa (1 = ocupado, 0 = vacío):")
print(sparse_matrix)

fila = 6
columna = 2

if sparse_matrix[fila, columna] == 1:
    print(f"El asiento en fila {fila}, columna {columna} está ocupado.")
else:
    print(f"El asiento en fila {fila}, columna {columna} está vacío.")


def matriz_tridiagonal(n):
    a = 4 * np.ones(n)
    b = -1 * np.ones(n-1)
    c = -1 * np.ones(n-1)
    matriz = np.diag(a) + np.diag(b, k=1) + np.diag(c, k=-1)
    return matriz

tridiagonal_matrix = matriz_tridiagonal(5)
print("Matriz Tridiagonal 5x5:")
print(tridiagonal_matrix)
